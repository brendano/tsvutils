#!/usr/bin/env python
"""
Convert a stream of JSON objects to TSV, extracting the keys 
you specify into columns.

If you don't specify any keys, it tries to figure out the set of all keys.
"""
#from __future__ import print_function
import simplejson
#import json as simplejson   # py 3.0
import sys,re,itertools
import tsvutil
tsvutil.fix_stdio()

#all_json = simplejson.load(sys.stdin)
#assert isinstance(all_json, list) and len(all_json)>0
#item1 = json[0]
#keys = items1.keys()
#keys.sort()
#json_iter = all_json

def safe_json_iter(raw_json_iter):
  for raw in raw_json_iter:
    try:
      json = simplejson.loads(raw)
      yield json
    except Exception, e:
      print>>sys.stderr, type(e), e
def take(n, iterable):
  "Return first n items of the iterable as a list"
  return list(itertools.islice(iterable, n))

json_iter = safe_json_iter(sys.stdin)
keys = sys.argv[1:]
if not keys:
  top = take(1000, json_iter)
  keys = set()
  for item in top:  keys |= set(item.keys())
  keys = list(keys); keys.sort()
  json_iter = itertools.chain(top, json_iter)

BAD_WS = re.compile(r"[\r\n\t]")

def clean_cell(x):
  if x is None: return ""
  if isinstance(x, unicode):
    return BAD_WS.sub(" ", x.encode('utf-8'))
  if isinstance(x, str):
    return BAD_WS.sub(" ", x)
  return x

def stringify(x):
  if isinstance(x, str) and not isinstance(x, unicode): return x
  if isinstance(x, unicode): return x.encode('utf-8')
  return str(x)

def lookup(json, k):
  # limited hacky subset of jpath
  parts = k.split('.')
  v = json
  for i,part in enumerate(parts):
    if part.endswith(']'):
      m = re.search(r'^([^\]]+)\[([^\]])\]$', part)
      if not m: raise Exception("wtf: %s" % repr(part))
      k,ind = m.groups()
      ind = eval(ind)
      v = v[k]
      v = v[ind]
    else:
      k = part
      v = v.get(k, '' if i==len(parts)-1 else {})
  return v

print "\t".join([k.encode('utf-8') for k in keys])
for json in json_iter:
  print "\t".join([stringify(clean_cell(lookup(json,k))) for k in keys])
  #print "\t".join([clean_cell(json[k]) for k in keys])
  #print(*[clean_cell(json[k]) for k in keys], sep="\t")

